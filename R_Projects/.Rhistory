as.data.frame()
print(average)
# Create a bivariate bar chart
barchart(
x = Box.Office ~ Rating,
data = average,
main = "Average Box Office Revenue by Rating",
xlab = "Rating",
ylab= "Box Office ($M)")
# Create a bivariate box plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab= "Box Office ($M)")
# Create a notched box plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
notch = TRUE,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab= "Box Office ($M)")
# Create a violin plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
panel = panel.violin,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab= "Box Office ($M)")
# create bivariate bar chart
ggplot(
data = average,
aes(x = Rating, y = Box.Office)) +
geom_bar(sta = "identity") +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# create bivariate box plot
ggplot(
data = average,
aes(x = Rating, y = Box.Office)) +
geom_boxplot() +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# create notched box plot
ggplot(
data = average,
aes(x = Rating, y = Box.Office)) +
geom_boxplot(notch = TRUE) +
ggtitle("Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# create bivariate box plot
ggplot(
data = average,
aes(x = Rating, y = Box.Office)) +
geom_boxplot() +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# create bivariate box plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_boxplot() +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# create notched box plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_boxplot(notch = TRUE) +
ggtitle("Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# create violin plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_violin() +
ggtitle("Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Box Office ($M)")
# set working directory
setwd("C:/Users/sseyl/OneDrive/Documents/GitHub/Data-Science-Projects/R_Projects")
# load movie data from CSV file
movies <- read.csv("Movies2.csv")
# peek at the data
head(movies)
# Create a frequency bar chart with defaults
plot(movies$Rating)
# Create a frequency bar chart with defaults
plot(as.factor(movies$Rating))
movies$Rating <- as.factor(movies$Rating)
plot(movies$Rating)
# add context to our bar chart
plot(
x = movies$Rating,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
# Create a color palette
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
palette <- brewer.pal(9, "Pastel1")
# clean up our bar chart
plot(
x = movies$Rating,
col = palette[2], # add color 2 from Pastel1 palette
border = NA, # remove the borders
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
# save as png image
png(
filename = "Count of Movies by Rating.png",
width = 640,
height = 480)
plot( # render the plot into the png
x = movies$Rating,
col = palette[2], # add color 2 from Pastel1 palette
border = NA, # remove the borders
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies"
)
# save as png image
png(
filename = "Count of Movies by Rating.png",
width = 640,
height = 480)
plot( # render the plot into the png
x = movies$Rating,
col = palette[2], # add color 2 from Pastel1 palette
border = NA, # remove the borders
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies"
)
def.off()
"Count of Movies")
# save as png image
png(
filename = "Count of Movies by Rating.png",
width = 640,
height = 480)
plot( # render the plot into the png
x = movies$Rating,
col = palette[2], # add color 2 from Pastel1 palette
border = NA, # remove the borders
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies"
)
dev.off()
# save ggplot2 data visualization
?ggsave
?barplot
?par
library(shiny)
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runExample("01_hello")
runExample("01_hello")
runapp("App-1")
runApp("App-1")
runApp("App-1")
runApp('App-1')
runApp('App-1')
runApp('App-1', display.mode="showcase")
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
titlePanel("censusVis"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")
)
)
)
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('App-2')
runApp('census-app')
paste("You have chosen a range that goes from ", input$range)
runApp('census-app')
install.packages("quantmod")
runApp('stockVis')
runGitHub("
Data_Science_Projects", "wallenetty")
library(shiny)
library(ggplot2)
data <-iris
head(data)
data
# Define user interface object ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Iris Dataset"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
#Sidebar panel for inputs ----
sidebarPanel(
h2("Iris Data Set"),
# slider
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75)),
# Creating radio buttons ----
radioButtons("p", "Select a column from the Iris data set:",
list("Sepal Length"='a', "Sepal Width"='b', "Petal Length"='c', "Petal Width"='d')),
# Creating slide input for bins on the histogram ---
sliderInput("bins", "Number of bins:", min = 1, max = 20, value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output histogram:
plotOutput("distPlot"),
)
)
)
# Define server logic ----
server <- function(input, output) {
# Referencing output distPlot as output$distPlot
output$distPlot <- renderPlot({
# Referencing input p as input$p
if(input$p == 'a'){i<-1}
if(input$p == 'b'){i<-2}
if(input$p == 'c'){i<-3}
if(input$p == 'd'){i<-4}
x <- iris[,i]
# Referencing input bins as input$bins
bins <- seq(min(x), max(x), length.out = input$bins +1)
# Creating a histogram as output
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
source("~/GitHub/Data-Science-Projects/R_Projects/Iris Shiny App/app.R", echo=TRUE)
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
# load libraries
library(shiny)
library(ggplot2)
library(dplyr)
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Deploying To Production.R')
runApp('Iris Shiny App')
runApp('C:/Grading/LMS/wallenetty-Data_Science_Projects-main/myRProjects/Shiny App Assignment')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
data("iris")
head(iris)
summary(iris)
runApp('Iris Shiny App')
runApp('Iris Shiny App')
dim(iris)
names(iris) # column names
View(iris)
class(iris) # data types
str(iris) # structure of data
irisData <- iris
irisData
missing_data <- sum(is.na)
missing_data <- sum(is.na(irisData))
missing_data <- sum(is.na(irisData))
print(missing_data)
duplicated(irisData)
table(irisData$Species)
PL <- iris$Petal.Length
PW <- iris$Petal.Width
plot(Pl, PW)
plot(PL, PW)
df <- iris[,1:4]
df
stars(df)
stars(df, key.loc=c(17,0))
stars(df, key.loc = c(20,0.5), draw.segments = TRUE)
hist(iris$Sepal.Length, col='steelblue', main='histogram', xlab='length', ylab="frequency")
boxplot(Sepal.Length ~ Species, data = irisData, main = "Sepal.Length", xlab="Species", ylab="Sepal Length")
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
boxplot(Sepal.Length ~ Species, data = irisData, main = "Sepal.Length", xlab="Species", ylab="Sepal Length", col="steelblue", border="black")
cor(df)
cor(df, method = "kendall")
cor(df, method = "spearman")
cor.test(df$Sepal.Length, df$Sepal.Width)
corrplot(cor(d))
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(cor(d))
corrplot(cor(df))
corrplot(corr)
corr <- cor(df) # correlation, default is pearson method
corrplot(corr) # default method is circle
corrplot(corr, method="pie")
corrplot(corr, method="color")
corrplot(corr, method="number")
corrplot(corr, method="lower")
corrplot(corr, method="shade")
corrplot(corr, method="upper")
corrplot(corr, method="ellipse")
corrplot(corr, type="upper")
corrplot(corr, type="lower")
runApp('Iris Shiny App')
corrplot(corr) # default method is circle
corrplot(corr, method="shade") # similar to color
corrplot(corr, method="color") # similar to heatmap
runApp('Iris Shiny App')
runApp('Iris Shiny App')
setosa
setosa <- iris[, iris$Species == "Iris-setosa"]
versicolor <- iris[, iris$Species == "Iris-versicolor"]
virginica <- iris[, iris$Species == "Iris-virginica"]
setosa
print(setosa)
setosa <- iris[iris$Species == "Iris-setosa",]
print(setosa)
setosa <- iris[,iris$Species == "Iris-setosa",]
versicolor <- iris[,iris$Species == "Iris-versicolor",]
virginica <- iris[, iris$Species == "Iris-virginica",]
print(setosa)
print(setosa$Species)
setosa <- iris[iris$Species == "Iris-setosa",]
setosa
setosa
versicolor
virginica
setosa <- irisData[irisData$Species == "Iris-setosa",]
versicolor <- irisData[irisData$Species == "Iris-versicolor",]
virginica <- irisData[ irisData$Species == "Iris-virginica",]
setosa
versicolor
virginica
print(irisData)
setosa <- irisData[irisData$Species == "setosa",]
versicolor <- irisData[irisData$Species == "versicolor",]
virginica <- irisData[ irisData$Species == "virginica",]
setosa
versicolor
virginica
setosa
runApp('Iris Shiny App')
merge(setosa_sum, versicolor_sum, all)
setosa_sum <- setosa %>%
group_by(Species) %>%
summarize("Avg Sepal Width" = mean(setosa$Sepal.Width),
"Avg Sepal Length" = mean(setosa$Sepal.Length),
"Avg Petal Width" = mean(setosa$Petal.Width),
"Avg Petal Length" = mean(setosa$Petal.Length))
versicolor_sum <- versicolor %>%
group_by(Species) %>%
summarize("Avg Sepal Width" = mean(versicolor$Sepal.Width),
"Avg Sepal Length" = mean(versicolor$Sepal.Length),
"Avg Petal Width" = mean(versicolor$Petal.Width),
"Avg Petal Length" = mean(versicolor$Petal.Length))
virginica_sum <- virginica %>%
group_by(Species) %>%
summarize("Avg Sepal Width" = mean(virginica$Sepal.Width),
"Avg Sepal Length" = mean(virginica$Sepal.Length),
"Avg Petal Width" = mean(virginica$Petal.Width),
"Avg Petal Length" = mean(virginica$Petal.Length))
merge(setosa_sum, versicolor_sum, all)
setosa_sum <- setosa %>%
group_by(Species) %>%
summarize("Avg Sepal Width" = mean(setosa$Sepal.Width),
"Avg Sepal Length" = mean(setosa$Sepal.Length),
"Avg Petal Width" = mean(setosa$Petal.Width),
"Avg Petal Length" = mean(setosa$Petal.Length))
versicolor_sum <- versicolor %>%
group_by(Species) %>%
summarize("Avg Sepal Width" = mean(versicolor$Sepal.Width),
"Avg Sepal Length" = mean(versicolor$Sepal.Length),
"Avg Petal Width" = mean(versicolor$Petal.Width),
"Avg Petal Length" = mean(versicolor$Petal.Length))
virginica_sum <- virginica %>%
group_by(Species) %>%
summarize("Avg Sepal Width" = mean(virginica$Sepal.Width),
"Avg Sepal Length" = mean(virginica$Sepal.Length),
"Avg Petal Width" = mean(virginica$Petal.Width),
"Avg Petal Length" = mean(virginica$Petal.Length))
merge(x = setosa_sum, y =versicolor_sum, all=TRUE )
newTable <- merge(x = setosa_sum, y =versicolor_sum, all=TRUE )
newTable
class(newTable)
final <- merge(x = newTable, y = virginica_sum, all=TRUE)
final
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
install.packages("shinyWidgets")
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp()
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
runApp('Iris Shiny App')
